#!/usr/bin/perl -w

use strict;
use vars qw( $conf );
use FS::Daemon ':all'; #daemonize1 drop_root daemonize2 myexit logfile sig*
use FS::UID qw( adminsuidsetup );
use FS::Record qw( qsearch qsearchs );
#use FS::cdr;
#use FS::cust_pkg;
#use FS::queue;

my $user = shift or die &usage;

#daemonize1('freeside-sprepaidd', $user); #keep unique pid files w/multi installs
daemonize1('freeside-cdrrewrited');

drop_root();

adminsuidsetup($user);

logfile( "%%%FREESIDE_LOG%%%/cdrrewrited-log.". $FS::UID::datasrc );

daemonize2();

$conf = new FS::Conf;

die "not running; cdr-asterisk_forward_rewrite, cdr-charged_party_rewrite ".
    " and cdr-taqua-accountcode_rewrite conf options are all off\n"
  unless _shouldrun();

#--

my %sessionnum_unmatch = ();
my $sessionnum_retry = 4 * 60 * 60; # 4 hours
my $sessionnum_giveup = 4 * 24 * 60 * 60; # 4 days

while (1) {

  #hmm... don't want to do an expensive search with an ever-growing bunch
  # of unprocessed CDRs during the month... better to mark them all as
  # rewritten "skipped", i.e. why we're a daemon in the first place
  # instead of just doing this search like normal CDRs

  #hmm :/
  my @recent = grep { ($sessionnum_unmatch{$_} + $sessionnum_retry) > time }
                 keys %sessionnum_unmatch;
  my $extra_sql = scalar(@recent)
                    ? ' AND acctid NOT IN ('. join(',', @recent). ') '
                    : '';

  my $found = 0;
  my %skip = ();
  foreach my $cdr ( 
    qsearch( {
      'table'     => 'cdr',
      'extra_sql' => 'FOR UPDATE',
      'hashref'   => {},
      'extra_sql' => 'WHERE freesidestatus IS NULL '.
                     ' AND freesiderewritestatus IS NULL '.
                     $extra_sql.
                     ' LIMIT 1024', #arbitrary, but don't eat too much memory
    } )
  ) {

    next if $skip{$cdr->acctid};

    $found = 1;
    my @status = ();

    if ( $conf->exists('cdr-asterisk_forward_rewrite')
         && $cdr->dstchannel =~ /^Local\/(\d+)/i && $1 ne $cdr->dst
       )
    {

      my $dst = $1;

      warn "dst ". $cdr->dst. " does not match dstchannel $dst ".
           "(". $cdr->dstchannel. "); rewriting CDR as a forwarded call";

      $cdr->charged_party($cdr->dst);
      $cdr->dst($dst);
      $cdr->amaflags(2);

      push @status, 'asterisk_forward';

    }

    if ( $conf->exists('cdr-charged_party_rewrite') && ! $cdr->charged_party ) {

      $cdr->set_charged_party;
      push @status, 'charged_party';

    }

    if (     $cdr->cdrtypenum == 1
         and $cdr->lastapp
         and (
            $conf->exists('cdr-taqua-accountcode_rewrite') or
            $conf->exists('cdr-taqua-callerid_rewrite') )
       )
    {

      #find the matching CDR
      my %search = ( 'sessionnum' => $cdr->sessionnum );
      if ( $cdr->lastapp eq 'acctcode' ) {
        $search{'src'} = $cdr->subscriber;
      } elsif ( $cdr->lastapp eq 'CallerId' ) {
        $search{'dst'} = $cdr->subscriber;
      }
      my $primary = qsearchs('cdr', \%search);

      unless ( $primary ) {

        my $cantfind = "can't find primary CDR with session ". $cdr->sessionnum.
                       ", src ". $cdr->subscriber;
        if ( $cdr->calldate_unix + $sessionnum_giveup < time ) {
          warn "ERROR: $cantfind; giving up\n";
          push @status, 'taqua-sessionnum-NOTFOUND';
          $cdr->status('done'); #so it doesn't try to rate
          delete $sessionnum_unmatch{$cdr->acctid}; #so it doesn't suck mem
        } else {
          warn "WARNING: $cantfind; will keep trying\n";
          $sessionnum_unmatch{$cdr->acctid} = time;
          next;
        }

      } else {

        if ( $cdr->lastapp eq 'acctcode' ) {
          # lastdata contains the dialed account code
          $primary->accountcode( $cdr->lastdata );
          push @status, 'taqua-accountcode';
        } elsif ( $cdr->lastapp eq 'CallerId' ) {
          # lastdata contains "allowed" or "restricted"
          # or case variants thereof
          if ( lc($cdr->lastdata) eq 'restricted' ) {
            $primary->clid( 'PRIVATE' );
          }
          push @status, 'taqua-callerid';
        } else {
          warn "unknown Taqua service name: ".$cdr->lastapp."\n";
        }
        #$primary->freesiderewritestatus( 'taqua-accountcode-primary' );
        my $error = $primary->replace if $primary->modified;
        if ( $error ) {
          warn "WARNING: error rewriting primary CDR (will retry): $error\n";
          next;
        }
        $skip{$primary->acctid} = 1;

        $cdr->status('done'); #so it doesn't try to rate

      }

    }

    $cdr->freesiderewritestatus(
      scalar(@status) ? join('/', @status) : 'skipped'
    );

    my $error = $cdr->replace;

    if ( $error ) {
      warn "WARNING: error rewriting CDR (will retry in 30 seconds):".
           " $error\n";
      sleep 30; #i dunno, wait and see if the database comes back?
    }

    last if sigterm() || sigint();

  }

  myexit() if sigterm() || sigint();
  #sleep 1 unless $found;
  sleep 5 unless $found;

}

#--

sub _shouldrun {
     $conf->exists('cdr-asterisk_forward_rewrite')
  || $conf->exists('cdr-charged_party_rewrite')
  || $conf->exists('cdr-taqua-accountcode_rewrite')
  || $conf->exists('cdr-taqua-callerid_rewrite')
  || 0
  ;
}

sub usage { 
  die "Usage:\n\n  freeside-cdrrewrited user\n";
}

=head1 NAME

freeside-cdrrewrited - Real-time daemon for CDR rewriting

=head1 SYNOPSIS

  freeside-cdrrewrited

=head1 DESCRIPTION

Runs continuously, searches for CDRs and does forwarded-call rewriting if any
of the "cdr-asterisk_forward_rewrite", "cdr-charged_party_rewrite" or
"cdr-taqua-accountcode_rewrite" config options are enabled.

=head1 SEE ALSO

=cut

1;
