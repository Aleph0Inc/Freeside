#!/usr/bin/perl

use strict;
use Getopt::Std;
use Date::Format qw(time2str);
use File::Temp qw(tempdir);
use Net::SFTP::Foreign;
use FS::UID qw(adminsuidsetup dbh);
use FS::Record qw(qsearch qsearchs);
use FS::pay_batch;
use FS::Conf;
use FS::Log;

use vars qw( $opt_a $opt_v );
getopts('av');

#$Net::SFTP::Foreign::debug = -1;

sub HELP_MESSAGE { "
  Usage:
    freeside-eftca-upload [ -v ] user batchnum
    freeside-eftca-upload -a [ -v ] user\n
" }

my $user = shift or die &HELP_MESSAGE;
adminsuidsetup $user;

my $log = FS::Log->new('freeside-eftca-upload');
log_info( "EFT Canada upload started\n" );

my @batches; 

if($opt_a) {
  local $@;

  my %criteria= ( 'status' => 'O', 'payby' => 'CHEK' );
  $criteria{'type'} = 'DEBIT' unless FS::pay_batch->can_handle_electronic_refunds('eft_canada');

  eval {
    @batches = qsearch('pay_batch', \%criteria)
  };
  log_error_and_die ("Fatal database error: $@")
    if $@;

  log_info_and_die( "Finished: No open batches found.\n" )
    unless @batches;
}
else {
  my $batchnum = shift;
  die &HELP_MESSAGE if !$batchnum;

  local $@;
  eval { @batches = qsearchs('pay_batch', { batchnum => $batchnum } ); };
  log_error_and_die("Fatal database error: $@")
    if $@;

  log_error_and_die( "Can't find payment batch '$batchnum'\n" ) if !@batches;
}

my $conf = new FS::Conf;

my $tmpdir = tempdir( CLEANUP => 1 ); #DIR=>somewhere?

foreach my $pay_batch (@batches) {

  my $batchnum = $pay_batch->batchnum;
  my $filename = time2str('%Y%m%d', time) . '-' . sprintf('%06d.csv',$batchnum);
  log_info( "Exporting batch $batchnum to $filename...\n" );
  my $text = $pay_batch->export_batch(format => 'eft_canada');
  unless ($text) {
    log_info( "Batch is empty, resolving..." );
    next;
  }
  open OUT, ">$tmpdir/$filename";
  print OUT $text;
  close OUT;

  my @batchconf = $conf->config('batchconfig-eft_canada', $pay_batch->agentnum);
  my $user = $batchconf[0]
    or log_error_and_die( "no EFT Canada batch username configured\n" );
  my $pass = $batchconf[1]
    or log_error_and_die( "no EFT Canada batch password configured\n" );

  my $host = 'ftp.eftcanada.com';
  log_info( "Connecting to $user\@$host...\n" );

  my $sftp = Net::SFTP::Foreign->new( host     => $host,
                                      user     => $user,
                                      password => $pass,
                                      timeout  => 30,
                                    );
  log_error_and_die("failed to connect to '$user\@$host'\n(".$sftp->error.")\n")
      if $sftp->error;

  $sftp->put("$tmpdir/$filename", "$filename")
    or log_error_and_die( "failed to upload file (".$sftp->error.")\n" );

  undef $sftp; #$sftp->disconnect;

  # Auto-approve and close the batch.  Some false laziness with manual_approve.
  my $batchnum = $pay_batch->batchnum;
  my $error;

  local $@;
  eval {
    foreach my $cpb ( qsearch('cust_pay_batch', { 'batchnum' => $batchnum } )) {
      $cpb->setfield('paid', $cpb->amount);
      $error = $cpb->approve($batchnum);
      last if $error;
    }
  };
  log_error_and_die("Fatal database error: $@")
    if $@;

  $error ||= $pay_batch->set_status('R');
  log_error_and_die( "error closing batch $batchnum: $error\n\n" )
    if $error;
}

log_info( "Finished!\n" );

sub log_info {
  my $log_message = shift;
  $log->info( $log_message );
  print STDERR $log_message if $opt_v;
}

sub log_info_and_die {
  my $log_message = shift;
  $log->info( $log_message );
  die $log_message;
}

sub log_error_and_die {
  my $log_message = shift;
  $log->error( $log_message );
  die $log_message;
}

=head1 NAME

freeside-eftca-upload - Transmit a payment batch to EFT Canada via SFTP.

=head1 SYNOPSIS

  freeside-eftca-upload [ -a ] [ -v ] user batchnum

=head1 DESCRIPTION

Command line tool to upload a payment batch to the EFT Canada gateway.  The 
batch will be exported to a comma-delimited file and transmitted via SFTP.
Use L<freeside-eftca-download> to retrieve the response file.

-a: Send all open batches, instead of specifying a batchnum.

-v: Be verbose.

user: freeside username

batchnum: pay_batch primary key

=head1 SEE ALSO

L<FS::pay_batch>

=cut

1;

