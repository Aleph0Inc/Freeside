%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%# 
%# This software is Copyright (c) 1996-2009 Best Practical Solutions, LLC
%#                                          <jesse@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}
<%args>
$Query => "id > 0"
$PrimaryGroupBy => 'Queue'
$SecondaryGroupBy => undef
$ChartStyle => 'bars'
</%args>
<%init>
my $chart_class;
use GD;
use GD::Text;

if ($ChartStyle eq 'pie') {
    require GD::Graph::pie;
    $chart_class = "GD::Graph::pie";
} else {
    require GD::Graph::bars;
    $chart_class = "GD::Graph::bars";
}

use RT::Report::Tickets;
my $tix = RT::Report::Tickets->new( $session{'CurrentUser'} );
my ($count_name, $value_name) = $tix->SetupGroupings(
    Query => $Query, GroupBy => $PrimaryGroupBy,
);

my $chart = $chart_class->new( 600 => 400 );

my $font = RT->Config->Get('ChartFont') || ['verdana', 'arial', gdMediumBoldFont];
$chart->set_title_font( $font, 12 ) if $chart->can('set_title_font');
$chart->set_legend_font( $font, 12 ) if $chart->can('set_legend_font');
$chart->set_x_label_font( $font, 10 ) if $chart->can('set_x_label_font');
$chart->set_y_label_font( $font, 10 ) if $chart->can('set_y_label_font');
$chart->set_label_font( $font, 10 ) if $chart->can('set_label_font');
$chart->set_x_axis_font( $font, 9 ) if $chart->can('set_x_axis_font');
$chart->set_y_axis_font( $font, 9 ) if $chart->can('set_y_axis_font');
$chart->set_values_font( $font, 9 ) if $chart->can('set_values_font');
$chart->set_value_font( $font, 9 ) if $chart->can('set_value_font');

# Pie charts don't like having no input, so we show a special image
# that indicates an error message. Because this is used in an <img>
# context, it can't be a simple error message. Without this check,
# the chart will just be a non-loading image.
if ($tix->Count == 0) {
    my $plot = GD::Image->new(600 => 400);
    $plot->colorAllocate(255, 255, 255); # background
    my $black = $plot->colorAllocate(0, 0, 0);

    require GD::Text::Wrap;
    my $error = GD::Text::Wrap->new($plot,
        color => $black,
        text  => loc("No tickets found."),
    );
    $error->set_font( $font, 12 );
    $error->draw(0, 0);

    $m->comp( 'SELF:Plot', plot => $plot, %ARGS );
}

if ($chart_class eq "GD::Graph::bars") {
    $chart->set(
        x_label => $tix->Label( $PrimaryGroupBy ),
        x_labels_vertical => 1,
        y_label => loc('Tickets'),
        show_values => 1
    );
}

my %class = (
    Queue => 'RT::Queue',
    Owner => 'RT::User',
    Creator => 'RT::User',
    LastUpdatedBy => 'RT::User',
);
my $class = $class{ $PrimaryGroupBy };

my %data;
while ( my $entry = $tix->Next ) {
    my $key;
    if ( $class ) {
        my $q = $class->new( $session{'CurrentUser'} );
        $q->Load( $entry->__Value( $value_name ) );
        $key = $q->Name;
    }
    else {
        $key = $entry->__Value($value_name);
    }
    $key ||= '(no value)';
    
    my $value = $entry->__Value( $count_name );
    if ($chart_class eq 'GD::Graph::pie') {
        $key = loc($key) ." - ". $value;
    } else {
        $key = loc($key);
    }
    $data{ $key } = $value;
}

# XXX: Convert 1970-01-01 date to the 'Not Set'
# this code should be generalized!!!
if ( $PrimaryGroupBy =~ /(Daily|Monthly|Annually)$/ ) {
    my $re;
    $re = qr{1970-01-01} if $PrimaryGroupBy =~ /Daily$/;
    $re = qr{1970-01} if $PrimaryGroupBy =~ /Monthly$/;
    $re = qr{1970} if $PrimaryGroupBy =~ /Annually$/;
    foreach my $k (keys %data) {
        my $tmp = $k;
        $tmp =~ s/^$re/loc('Not Set')/e or next;
        $data{$tmp} = delete $data{$k};
    }
}

unless (keys %data) {
    $data{''} = 0;
}

my $plot = $chart->plot( [ [sort keys %data], [map $data{$_}, sort keys %data] ] ) or die $chart->error;
$m->comp( 'SELF:Plot', plot => $plot, %ARGS );
</%init>

<%METHOD Plot>
<%ARGS>
$plot => undef
</%ARGS>
<%INIT>
my @types = ('png', 'gif');

for my $type (@types) {
    $plot->can($type)
        or next;

    $r->content_type("image/$type");
    $m->out( $plot->$type );
    $m->abort();
}

die "Your GD library appears to support none of the following image types: " . join(', ', @types);
</%INIT>

</%METHOD>
