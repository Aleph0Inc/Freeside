<%ARGS>
  $Date      => undef
  @Tickets   => ()
  $slots     => $default_slots
  $sday      => undef
  $tod_row   => undef
  $timestep  => $default_timestep
  @username  => ()
  $LengthMin => $default_timestep
  $custnum   => undef
  $pkgnum    => undef
  $RedirectToBasics => 0
</%ARGS>
% my $scheduling = ($custnum && $LengthMin) ? 1 : 0;
% foreach my $username ( @username ) {
%
%   my %schedule = UserDaySchedule( username => $username,
%                                   'date'   => $Date->strftime('%F'),
%                                   Tickets  => \@Tickets,
%                                 );
%
%   my $bgcolor = '#666666';
%   my $border = '1px solid #555555';
%   my $label = '';
%   my $selectable = 0; # can we schedule a new appointment
%   my $ticketid = 0;
%   my $draggable_length = 0;
%   my $droppable = 0; # can we reschedule an appointment here
%   my $cells = 0; # total cell count for appointment
%   my $offset = 0; # position of cell in appointment
%
%   #white out available times
%   foreach my $avail ( @{ $schedule{'avail'} } ) {
%     my( $start, $end ) = @$avail;
%     next if $start >= ($tod_row+$timestep) || $end <= $tod_row;
%     $bgcolor = '#FFFFFF';
%     $border = '1px solid #D7D7D7';
%     $selectable = 1
%       if $LengthMin <= $end - $tod_row  #the slot is long enough
%       && ! grep { $_ > $tod_row && $LengthMin > $_ - $tod_row }
%              map $_->[0], values %{ $schedule{'scheduled'} };
%   }
%
%   #block out / show / color code existing appointments
%   my $maxstarts = 0;
%   foreach my $id ( keys %{ $schedule{'scheduled'} } ) {
%
%     my( $starts, $due, $col, $t ) = @{ $schedule{'scheduled'}->{$id} };
%
%     # misleading loop--at most one id should pass this test
%     next if $starts >= ($tod_row+$timestep) || $due <= $tod_row;
%
%     # but, if for any reason a scheduling conflict occurs, 
%     # use the later starting one to minimize UI conflicts--
%     #   not to imply that this scenario has been tested or should ever happen!!!
%     next if $starts < $maxstarts;
%     $maxstarts = $starts;
%
%     $ticketid = $id;
%     $bgcolor = '#'.$col;
%     $border = '1px solid #D7D7D7';
%     # can't schedule a new appointment
%     $selectable = 0;
%     # but can reschedule a ticket overlapping its old slot (filtered by can_drop)
%     $droppable = 1 unless $scheduling;
%     $draggable_length = $due - $starts;
%     $cells = int( ($due-$starts) / $timestep );
%     $cells++ if ($due-$starts) % $timestep;
%
%     #false laziness w/misc/xmlhttp-ticket-update.html & CalendarDaySchedule
%     my %hash = $m->comp('/Ticket/Elements/Customers', Ticket => $t);
%     my @cust_main = values( %{$hash{cust_main}} );
%
%     #false laziness w/xmlhttp-ticket-update.html
%     $label .= FS::sched_avail::pretty_time($starts). '-'.
%               FS::sched_avail::pretty_time($due).
%               ': '. $cust_main[0]->_FreesideURILabel;
%               #'install for custname XX miles away'; #XXX placeholder/more
%
%     $offset = int( ($tod_row - $starts) / $timestep );
%     $offset++ if ($tod_row - $starts) % $timestep;
%   }
%
%   my $td_id = 'td_'. $Date->epoch. '_'. $tod_row. '_'. $username;

    <td style = "background-color: <% $bgcolor %>; border: <% $border %>"
          ID="<% $td_id %>"
        class = "<% ($selectable && $scheduling) ? 'weeklyselectable' : 'weekly' %>"
%#                 <%   $is_today     ? 'today'
%#                    : $is_yesterday ? 'yesterday'
%#                    : $is_aweekago  ? 'aweekago'
%#                    : ''
%#                 %>"
%     if ( $selectable ) {
%
%       # Scheduling a new appointment
%       if ( $scheduling ) {
%
%         #XXX for now, construct a ticket creation URL
%         # eventually, do much the same, but say "appointment made", show time
%         # and date, have # options to do things with it? etc.
%         # then redir back to customer/appointment view i guess
%
%         #abstraction is leaking like a sieve... linking back to freeside cust
%         # (XXX and eventually, package)
%         my $cust_main = qsearchs('cust_main', { custnum=>$custnum } )
%           or die "unknown custnum $custnum";
%
%         my $conf = new FS::Conf;
%         my $Queue = $conf->config('ticket_system-appointment-queueid')
%           or die "ticket_system-appointment-queueid configuration not set";
%
%         my $member = "freeside://freeside/cust_main/$custnum";
%
%         my $Starts = int($tod_row/60). ':'. sprintf('%02d',$tod_row%60). ':00';
%         my $Due    = int(($tod_row+$LengthMin)/60). ':'.
%                      sprintf('%02d',($tod_row+$LengthMin)%60). ':00';
%
%         my $url = $RT::WebPath. '/Ticket/Display.html?id=new'.
%                   "&Queue=$Queue".
%                   "&Owner=$username".
%                   '&Starts='. $Date->strftime('%F').'%20'. $Starts.
%                   '&Due='.    $Date->strftime('%F').'%20'. $Due.
%                   '&new-MemberOf='. $member. #XXX uri_escape?
%                   '&Status=new'.
%                   '&RedirectToBasics='.$RedirectToBasics;
%                   #'&Requestors='. #XXX Freeside customer requestor(s) (package?

          onmouseover = "boxon(this);"
          onmouseout  = "boxoff(this);"
          title       = "<% 'Make appointment for '.
                              FS::sched_avail::pretty_time($tod_row). '-'.
                              FS::sched_avail::pretty_time($tod_row+$LengthMin)
                        %>"
          onclick     = "window.location.href = '<% $url %>'"
%
%       # If not scheduling, allow drag-and-drop rescheduling
%       } else {
%         $droppable = 1;
%       }
%
%     }
    ></td>
    <SCRIPT TYPE="text/javascript">

      var $cell_<% $td_id %> = $('#<% $td_id %>');
      $cell_<% $td_id %>.data('username', "<% $username %>");
      $cell_<% $td_id %>.data('starts',   <% $Date->epoch + $tod_row*60 %>);
      $cell_<% $td_id %>.data('epoch',    <% $Date->epoch %>);
      $cell_<% $td_id %>.data('tod_row',  <% $tod_row %>);

%     if ($selectable) {
      set_schedulable_cell($cell_<% $td_id %>);
%     }

%     if ($ticketid) {
      set_appointment_cell(
        $cell_<% $td_id %>,
        <% $ticketid |js_string %>,
        <% $bgcolor |n,js_string %>,
        <% $label |n,js_string %>,
        <% $draggable_length * 60 %>,
        <% $cells %>,
        <% $offset %>
      );
%     }
%     if ( $droppable ) {
%       if ( $draggable_length ) {
      set_draggable_cell($cell_<% $td_id %>);
%       }
      set_droppable_cell($cell_<% $td_id %>);
%     }

    </SCRIPT>
% }
<%ONCE>
my $default_slots = RT->Config->Get('CalendarWeeklySlots') || 5;
my $default_timestep = RT->Config->Get('CalendarWeeklySizeMin') || 30; #1/2h
</%ONCE>
<%INIT>

use RTx::Schedule qw( UserDaySchedule );
use FS::sched_avail; #just for pretty_time

#what happened?  alas.  for constructing the ticket creation links
use FS::Record qw( qsearchs );
use FS::cust_main;

</%INIT>
